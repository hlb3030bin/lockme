<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAFQAAADgAAABBAAAASQAAAEgAAABBAAAANgAAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAFAAAAPAAAAIQAAADNAAAA8gAAAPcAAAD5AAAA+QAAAPcAAADxAAAAyQAAAIAAAAA4AAAABAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAALAAAAJsAAADtAAAA/wAAAP8AAAD/AAAA/gAAAPsAAAD7AAAA/gAAAP8AAAD/AAAA/wAA
        AOoAAACVAAAAJwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABAAAAFgAAADbAAAA/wAAAP8AAAD4AAAA2gAAAKAAAABnAAAATwAAAE8AAABoAAAAoAAA
        ANoAAAD4AAAA/wAAAP8AAADXAAAAUgAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AOkAAABeAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAA
        AFUAAADaAAAA/wAAAP8AAAD4AAAA1gAAAJsAAABnAAAATwAAAE8AAABnAAAAnAAAANYAAAD4AAAA/wAA
        AP8AAADYAAAAUQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACoAAACYAAAA7AAAAP8AAAD/AAAA/wAAAP4AAAD7AAAA+wAAAP4AAAD/AAAA/wAA
        AP8AAADqAAAAlgAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAA6AAAAggAAAMoAAADvAAAA9wAAAPkAAAD5AAAA9wAA
        AO8AAADJAAAAgQAAADkAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEgAAADQAAABAAAAASAAA
        AEgAAABAAAAAMwAAABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////4Af//4AB//4AAP/8AAA/+APAH/gf+B/wB+AP4EfiB+DD
        wwfhwYOHweAHg8HgB4PD8A/Dw/5/w8Pjx8PDwYPDwcGDg8HAA4PhwYOH4MPDB+B//gfwP/wP+B/4H/gD
        wB/8AAA//wAA//+AAf//4Af///////////8=
</value>
  </data>
</root>